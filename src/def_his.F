#ifndef AVRH
# include "cppdefs.h"
!--> # define NETCDF4
!--> # define NCCOMPRESS
# define DEF_FOUT def_his
#else
# ifndef AVR2DH
#  define DEF_FOUT def_avg
# else
#  define DEF_FOUT def_slavg
# endif
#endif
      subroutine DEF_FOUT (ncid, total_rec, ierr)
!
! Create/open averages/history netCDF file. In the case when a new
! netCDF file is created, define all variables, their dimensions and
! attributes. In the case when a previously existing netCDF file is
! to be opened for addition of new data, verify that all dimensions
! of the file are consistent with the present model configuration
! and all necessary variables exist. Save netCDF IDs for all needed
! variables. Also determine size of the unlimited dimension.
!
! The difference between def_his and def_avg is as follows: they
! have different netCDF file name (hisname/avgname); netCDF file ID
! (passed as argument); time record index (hisindx/avgindx); array
! of switches which variables to write (wrthis/wrtavg); and different
! sets of netCDF variable IDs (hisTime...hisHbl/avgTime...avgHbl);
! and the first attribute of each variable, long_name, has prefix
! 'averaged'. Because most of the code is identical for both
! routines, the second one is generated from the first entirely
! by CPP.
!
! If SLICE_AVG is defined 'def_slavg' is also generated by CPP 
!
      implicit none
      logical create_new_file
      integer ncid, total_rec, ierr, rec, lstr,lvar,lenstr, timedim
     &      , r2dgrd(3),  u2dgrd(3), v2dgrd(3),  auxil(2),  checkdims
     &      , itrc
#if defined SOLVE3D && !defined AVR2DH
     &      , r3dgrd(4),  u3dgrd(4), v3dgrd(4),  w3dgrd(4)
#endif
      character*60 text
      integer my_nf_def_dim, ifour
#ifdef NCCOMPRESS
      integer ncshuff, ncdefl, nclev, ncctg
     &        , ncrchnk2(3), ncuchnk2(3), ncvchnk2(3)
# if defined SOLVE3D && !defined AVR2DH
     &        , ncrchnk3(4), ncuchnk3(4), ncvchnk3(4)
# endif
      data ncshuff, ncdefl, nclev, ncctg / 0, 1, 1, 0 /
#endif

      parameter (ifour=4)
#include "param.h"
#include "scalars.h"
#include "ncvars.h"
#include "netcdf.inc"


#ifdef MASK_LAND_DATA
# ifdef HIS_DOUBLE
      real*8 spv_set
      parameter (spv_set=1.D+33)
# else
      real*4 spv_set
      parameter (spv_set=1.E+33)
# endif
#endif

#ifdef NCCOMPRESS
c  Chunk Size (atomic access size)
c  for netcdf4 (HDF5) 2 and 3d fields in output
      ncrchnk2(1)=xi_rho
      ncrchnk2(2)=eta_rho
      ncrchnk2(3)=1
      ncuchnk2(1)=xi_u
      ncuchnk2(2)=eta_rho
      ncuchnk2(3)=1
      ncvchnk2(1)=xi_rho
      ncvchnk2(2)=eta_v
      ncvchnk2(3)=1
# if defined SOLVE3D && !defined AVR2DH
      ncrchnk3(1)=xi_rho
      ncrchnk3(2)=eta_rho
      ncrchnk3(3)=1
      ncrchnk3(4)=1
      ncuchnk3(1)=xi_u
      ncuchnk3(2)=eta_rho
      ncuchnk3(3)=1
      ncuchnk3(4)=1
      ncvchnk3(1)=xi_rho
      ncvchnk3(2)=eta_v
      ncvchnk3(3)=1
      ncvchnk3(4)=1
# endif
#endif

#ifndef AVRH
# define SDEF_FOUT 'DEF_HIS'
# define ncname hisname
# define rec_per_file nrpfhis
# define wrt wrthis
# define vidTime hisTime
# define vidTstep hisTstep
# define vidZ hisZ
# define vidUb hisUb
# define vidVb hisVb
# define vidU hisU
# define vidV hisV
# define vidT hisT
# define vidR hisR
# define vidO hisO
# define vidW hisW
# define vidAkv hisAkv
# define vidAkt hisAkt
# define NVDIM 4
# define RGRD r3dgrd
# define UGRD u3dgrd
# define VGRD v3dgrd
# define WGRD w3dgrd
# ifdef KPP_DIAGNOSE
#  define vidRich hisRich
#  define vidRichN hisRichN
# endif
# define vidAks hisAks
# define vidHbl hisHbl
# define vidHbbl hisHbbl
# if defined BIOLOGY_NPZDOC || defined BIOLOGY_BEC
#  if defined CH_CARBON_DEPTH
#   define vidPHd hisPHd
#   define vidCO2STARd hisCO2STARd
#   define vidHCO3d hisHCO3d
#   define vidCO3d hisCO3d
#  endif /* CH_CARBON_DEPTH */
#  define vidPH hisPH
#  define vidPCO2 hisPCO2
#  define vidPCO2air hisPCO2air
#  define vidPARinc hisPARinc
#  define vidPAR hisPAR
#  ifdef SEDIMENT_BIOLOGY
#   define vidTsed hisTsed
#  endif
# endif /* BIOLOGY_NPZDOC || BIOLOGY_BEC*/
# ifdef WRITE_DEPTHS
#  define vidz_r hisz_r
#  define vidz_w hisz_w
#  define vidHz hisHz
# endif /* WRITE_DEPTHS */
#else
# ifndef AVR2DH
# define SDEF_FOUT 'DEF_AVG'
# define ncname avgname
# define rec_per_file nrpfavg
# define wrt wrtavg
# define vidTime avgTime
# define vidTstep avgTstep
# define vidZ avgZ
# define vidUb avgUb
# define vidVb avgVb
# define vidU avgU
# define vidV avgV
# define vidT avgT
# define vidR avgR
# define vidO avgO
# define vidW avgW
# define vidAkv avgAkv
# define vidAkt avgAkt
# define NVDIM 4
# define RGRD r3dgrd
# define UGRD u3dgrd
# define VGRD v3dgrd
# define WGRD w3dgrd
# ifdef KPP_DIAGNOSE
#  define vidRich avgRich
#  define vidRichN avgRichN
# endif
# define vidAks avgAks
# define vidHbl avgHbl
# define vidHbbl avgHbbl
# if defined BIOLOGY_NPZDOC || defined BIOLOGY_BEC
#  if defined CH_CARBON_DEPTH
#   define vidPHd avgPHd
#   define vidCO2STARd avgCO2STARd
#   define vidHCO3d avgHCO3d
#   define vidCO3d avgCO3d
#  endif /* CH_CARBON_DEPTH */
#  define vidPH avgPH
#  define vidPCO2 avgPCO2
#  define vidPCO2air avgPCO2air
#  define vidPARinc avgPARinc
#  define vidPAR avgPAR
#  ifdef SEDIMENT_BIOLOGY
#    define vidTsed avgTsed
#  endif
# endif /* BIOLOGY_NPZDOC || BIOLOGY_BEC */
# ifdef WRITE_DEPTHS
#  define vidz_r avgz_r
#  define vidz_w avgz_w
#  define vidHz avgHz
# endif /* WRITE_DEPTHS */
# else /* AVR2DH is defined */
#  define SDEF_FOUT 'DEF_SLAVG'
#  define ncname slavgname
#  define rec_per_file nrpfslavg
#  define wrt wrtslavg
#  define vidTime slavgTime
#  define vidTstep slavgTstep
#  define vidZ slavgZ
#  define vidUb slavgUb
#  define vidVb slavgVb
#  define vidU slavgU
#  define vidV slavgV
#  define vidT slavgT
#  define vidR slavgR
#  define vidO slavgO
#  define vidW slavgW
#  define vidAkv slavgAkv
#  define vidAkt slavgAkt
#  define NVDIM 3
#  define RGRD r2dgrd
#  define UGRD u2dgrd
#  define VGRD v2dgrd
#  define WGRD r2dgrd
#  ifdef KPP_DIAGNOSE
#   define vidRich slavgRich
#   define vidRichN slavgRichN
#  endif
#  define vidAks slavgAks
#  define vidHbl slavgHbl
#  define vidHbbl slavgHbbl
#  if defined BIOLOGY_NPZDOC || defined BIOLOGY_BEC
#   if defined CH_CARBON_DEPTH
#    define vidPHd slavgPHd
#    define vidCO2STARd slavgCO2STARd
#    define vidHCO3d slavgHCO3d
#    define vidCO3d slavgCO3d
#   endif /* CH_CARBON_DEPTH */
#   define vidPH slavgPH
#   define vidPCO2 slavgPCO2
#   define vidPCO2air slavgPCO2air
#   define vidPARinc slavgPARinc
#   define vidPAR slavgPAR
#   ifdef SEDIMENT_BIOLOGY
#     define vidTsed slavgTsed
#   endif
#  endif /* BIOLOGY_NPZDOC || BIOLOGY_BEC */
# endif /* AVR2DH */
# ifdef WRITE_DEPTHS
#  define vidz_r slavgz_r
#  define vidz_w slavgz_w
#  define vidHz slavgHz
# endif /* WRITE_DEPTHS */
#endif /* AVRH */
!
! Put time record index into file name. In  the case when model
! output is to be arranged into sequence of named files, the naming
! convention is as follows: 'his_root.INDEX.[MPI_node.]nc', where
! INDEX is an integer number such that (i) it is divisible by the
! specified number of records per file; and (ii)
!
!      INDEX + record_within_the_file = total_record
!
! where, 1 =< record_within_the_file =< records_per_file, so that
! total_record changes continuously throughout the sequence of files.
!
      ierr=0
      lstr=lenstr(ncname)
      if (rec_per_file.gt.0) then
        lvar=total_rec-(1+mod(total_rec-1, rec_per_file))
        call insert_time_index (ncname, lstr, lvar, ierr)
        if (ierr .ne. 0) goto 99
      endif
!
! Decide whether to create a new file, or open existing one.
! Overall the whole code below is organized into 3-way switch,
!
! 10  if (create_new_file) then
!        .... create new file, save netCDF ids for all variables;
!     elseif (ncid.eq.-1) then
!        .... try to open existing file and check its dimensions
!       if (cannot be opened or rejected) then
!         create_new_file=.true.
!         goto 10
!       endif   and prepare
!        .... prepare the file for adding new data,
!        .... find and save netCDF ids for all variables
!     else
!        .... just open, no checking, all ids are assumed to be
!        .... already known (MPI single file output only).
!     endif
!
! which is designed to implement flexible opening policy:
! if ldefhis=.true., it forces creation of a new file [if the
! file already exists, it will be overwritten]; on the other hand,
! ldefhis=.false., it is assumed that the file already exists and
! an attempt to open it is made; if the attempt is successful, the
! file is prepared for appending hew data; if it fails, a new file
! is created.
!
      create_new_file=ldefhis
      if (ncid.ne.-1) create_new_file=.false.
#if defined MPI && !defined PARALLEL_FILES
      if (mynode.gt.0) create_new_file=.false.
#endif
!
! Create new history/averages file:    Put global attributes
! ====== === ======= ======== =====    and define all variables.
!
  10  if (create_new_file) then
!  10  continue
#ifdef NETCDF4
        ierr=nf_create(ncname(1:lstr), 
     &                 or(nf_clobber,nf_netcdf4), ncid)
#else
        ierr=nf_create(ncname(1:lstr), 
     &                 or(nf_clobber,nf_64bit_offset), ncid)
#endif
        if (ierr .ne. nf_noerr) then
          write(stdout,'(/1x,3A/)') 'ERROR in ',SDEF_FOUT,': Can not ',
     &                 'create netCDF file ''', ncname(1:lstr), '''.'
          goto 99
        endif
        if (rec_per_file.eq.0) total_rec=0
!
! Put global attributes.
! --- ------ -----------
!
        call put_global_atts (ncid, ierr)
!
! Define dimensions of staggered fields.
! ------ ---------- -- --------- -------
!
        ierr=my_nf_def_dim (ncid, 'xi_rho',  xi_rho,  r2dgrd(1))
        ierr=my_nf_def_dim (ncid, 'xi_u',    xi_u,    u2dgrd(1))
        ierr=my_nf_def_dim (ncid, 'eta_rho', eta_rho, r2dgrd(2))
        ierr=my_nf_def_dim (ncid, 'eta_v',   eta_v,   v2dgrd(2))
#ifdef SOLVE3D 
# ifndef AVR2DH
        ierr=my_nf_def_dim (ncid, 's_rho',   N,       r3dgrd(3))
        ierr=my_nf_def_dim (ncid, 's_w',     N+1,     w3dgrd(3))
# else
        ierr=nf_put_att_int (ncid, nf_global, 
     &              'Sigma_level_of_slices',
     &                 NF_INT, 1, ksl)
        ierr=nf_put_att_int (ncid, nf_global, 
     &                    'Total_number_of_sigma_levels',
     &                 NF_INT, 1, N)
# endif
#endif
        ierr=my_nf_def_dim (ncid, 'time', nf_unlimited, timedim)
        ierr=my_nf_def_dim (ncid, 'auxil',   ifour,    auxil(1))

        auxil(2)=timedim
 
        r2dgrd(3)=timedim           ! Free surface
 
        u2dgrd(2)=r2dgrd(2)         ! 2D UBAR-type
        u2dgrd(3)=timedim
 
        v2dgrd(1)=r2dgrd(1)         ! 2D VBAR-type
        v2dgrd(3)=timedim
 
#if defined SOLVE3D && !defined AVR2DH
        r3dgrd(1)=r2dgrd(1)         !
        r3dgrd(2)=r2dgrd(2)         ! 3D RHO-type
        r3dgrd(4)=timedim           !
 
        u3dgrd(1)=u2dgrd(1)         !
        u3dgrd(2)=r2dgrd(2)         ! 3D U-type
        u3dgrd(3)=r3dgrd(3)         !
        u3dgrd(4)=timedim
 
        v3dgrd(1)=r2dgrd(1)         !
        v3dgrd(2)=v2dgrd(2)         ! 3D V-type
        v3dgrd(3)=r3dgrd(3)         !
        v3dgrd(4)=timedim
 
        w3dgrd(1)=r2dgrd(1)         !
        w3dgrd(2)=r2dgrd(2)         ! 3D W-type
        w3dgrd(4)=timedim           !
#endif
#if (defined PUT_GRID_INTO_HISTORY && !defined AVRH)\
 || (defined PUT_GRID_INTO_AVERAGES && defined AVRH)
!
! Define grid variables.
! ------ ---- ----------
!
        if (total_rec.le.1) call def_grid (ncid, r2dgrd)
#endif
 
!
! Define evolving model variables.
! ------ -------- ----- ----------
!
! Time step number and time record indices:
!
        ierr=nf_def_var (ncid, 'time_step', nf_int, 2, auxil,
     &                                                 vidTstep)
        ierr=nf_put_att_text (ncid, vidTstep, 'long_name', 48,
     &       'time step and record numbers from initialization')
!
! Time.
!
        lvar=lenstr(vname(1,indxTime))
        ierr=nf_def_var (ncid, vname(1,indxTime)(1:lvar), NF_FOUT,
     &                                        1, timedim, vidTime)
#ifdef AVRH
        text='averaged '/ /vname(2,indxTime)
#else
        text=vname(2,indxTime)
#endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidTime, 'long_name', lvar,
     &                                             text(1:lvar))
        lvar=lenstr(vname(3,indxTime))
        ierr=nf_put_att_text (ncid, vidTime, 'units',  lvar,
     &                                vname(3,indxTime)(1:lvar))
!
! Free-surface.
!
        if (wrt(indxZ)) then
          lvar=lenstr(vname(1,indxZ))
          ierr=nf_def_var (ncid, vname(1,indxZ)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidZ)
#ifdef AVRH
          text='averaged '/ /vname(2,indxZ)
#else
          text=vname(2,indxZ)
#endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidZ, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxZ))
          ierr=nf_put_att_text (ncid, vidZ, 'units',     lvar,
     &                                  vname(3,indxZ)(1:lvar))
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidZ, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidZ, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidZ, ncctg, ncrchnk2)
#endif

        endif
!
! 2D momenta in XI- and ETA-directions.
!
        if (wrt(indxUb)) then
          lvar=lenstr(vname(1,indxUb))
          ierr=nf_def_var (ncid, vname(1,indxUb)(1:lvar), NF_FOUT,
     &                                           3, u2dgrd, vidUb)
#ifdef AVRH
          text='averaged '/ /vname(2,indxUb)
#else
          text=vname(2,indxUb)
#endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidUb, 'long_name', lvar,
     &                                             text(1:lvar))
          lvar=lenstr(vname(3,indxUb))
          ierr=nf_put_att_text (ncid, vidUb, 'units',     lvar,
     &                                  vname(3,indxUb)(1:lvar))
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidUb, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidUb, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidUb, ncctg, ncuchnk2)
#endif
        endif
 
        if (wrt(indxVb)) then
          lvar=lenstr(vname(1,indxVb))
          ierr=nf_def_var (ncid, vname(1,indxVb)(1:lvar), NF_FOUT,
     &                                           3, v2dgrd, vidVb)
#ifdef AVRH
          text='averaged '/ /vname(2,indxVb)
#else
          text=vname(2,indxVb)
#endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidVb, 'long_name', lvar,
     &                                             text(1:lvar))
          lvar=lenstr(vname(3,indxVb))
          ierr=nf_put_att_text (ncid, vidVb, 'units',     lvar,
     &                                  vname(3,indxVb)(1:lvar))
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidVb, '_FillValue',
     &                                      NF_FOUT, 1, spv_set)
#endif
        endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidVb, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidVb, ncctg, ncvchnk2)
#endif
#ifdef SOLVE3D
!
! 3D momenta in XI- and ETA-directions.
!
        if (wrt(indxU)) then
          lvar=lenstr(vname(1,indxU))
          ierr=nf_def_var (ncid, vname(1,indxU)(1:lvar), NF_FOUT,
     &                                           NVDIM, UGRD, vidU)
# ifdef AVRH
          text='averaged '/ /vname(2,indxU)
# else
          text=vname(2,indxU)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidU, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxU))
          ierr=nf_put_att_text (ncid, vidU, 'units',     lvar,
     &                                  vname(3,indxU)(1:lvar))
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidU, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidU, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidU, ncctg, ncuchnk3)
#endif

        endif
 
        if (wrt(indxV)) then
          lvar=lenstr(vname(1,indxV))
          ierr=nf_def_var (ncid, vname(1,indxV)(1:lvar), NF_FOUT,
     &                                           NVDIM, VGRD, vidV)
# ifdef AVRH
          text='2d-slice of averaged '/ /vname(2,indxV)
# else
          text='2d-slice of '/ /vname(2,indxV)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidV, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxV))
          ierr=nf_put_att_text (ncid, vidV, 'units',     lvar,
     &                                  vname(3,indxV)(1:lvar))
# ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidV, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
# endif
# ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidV, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidV, ncctg, ncvchnk3)
# endif
# ifdef  AVR2DH 
            ierr=nf_put_att_int (ncid, vidT(itrc), 'sigma-level',
     &                                          lvar, ksl)
# endif
        endif
!
! Tracer variables.
!
        do itrc=1,NT
          if (wrt(indxT+itrc-1)) then
            lvar=lenstr(vname(1,indxT+itrc-1))
            ierr=nf_def_var (ncid, vname(1,indxT+itrc-1)(1:lvar),
     &                             NF_FOUT, NVDIM, RGRD, vidT(itrc))
# ifdef AVRH
            text='averaged '/ /vname(2,indxT+itrc-1)
# else
            text=vname(2,indxT+itrc-1)
# endif
            lvar=lenstr(text)
            ierr=nf_put_att_text (ncid, vidT(itrc), 'long_name',
     &                                          lvar, text(1:lvar))
            lvar=lenstr(vname(3,indxT+itrc-1))
            ierr=nf_put_att_text (ncid, vidT(itrc), 'units', lvar,
     &                               vname(3,indxT+itrc-1)(1:lvar))
# ifdef MASK_LAND_DATA
            ierr=nf_put_att_FOUT (ncid, vidT(itrc), '_FillValue',
     &                                       NF_FOUT, 1, spv_set)
# endif
# ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidT, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidT, ncctg, ncrchnk3)
# endif
# ifdef HFREQ_2D_AVERAGES
            ierr=nf_put_att_text (ncid, vidT(itrc), 'sigma-level',
     &                                          lvar, 'top')
# endif
          endif
        enddo
# ifdef SEDIMENT_BIOLOGY
!
! Sediment tracer variables.
!
        do itrc=1,NT_sed
          if (wrt(indxSedOrgN+itrc-1)) then
            lvar=lenstr(vname(1,indxSedOrgN+itrc-1))
            ierr=nf_def_var (ncid, 
     &           vname(1,indxSedOrgN+itrc-1)(1:lvar),
     &           NF_FOUT, 3, r2dgrd, vidTsed(itrc))
# ifndef AVRH
            lvar=lenstr(vname(2,indxSedOrgN+itrc-1))
            ierr=nf_put_att_text (ncid, vidTsed(itrc), 'long_name',
     &           lvar, vname(2,indxSedOrgN+itrc-1)(1:lvar))
# else
            text='averaged '/ /vname(2,indxSedOrgN+itrc-1)
            lvar=lenstr(text)
            ierr=nf_put_att_text (ncid, vidTsed(itrc), 'long_name',
     &           lvar, text(1:lvar))
# endif
            lvar=lenstr(vname(3,indxSedOrgN+itrc-1))
            ierr=nf_put_att_text (ncid, vidTsed(itrc), 'units', lvar,
     &           vname(3,indxSedOrgN+itrc-1)(1:lvar))
            lvar=lenstr(vname(4,indxSedOrgN+itrc-1))
            ierr=nf_put_att_text (ncid, vidTsed(itrc), 'field', lvar,
     &           vname(4,indxSedOrgN+itrc-1)(1:lvar))
          endif
        enddo
# endif /* SEDIMENT_BIOLOGY */
!
! Density anomaly.
!
        if (wrt(indxR)) then
          lvar=lenstr(vname(1,indxR))
          ierr=nf_def_var (ncid, vname(1,indxR)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidR)
# ifdef AVRH
          text='averaged '/ /vname(2,indxR)
# else
          text=vname(2,indxR)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidR, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxR))
          ierr=nf_put_att_text (ncid, vidR, 'units',     lvar,
     &                                  vname(3,indxR)(1:lvar))
#ifdef MASK_LAND_DATA
          ierr=nf_put_att_FOUT (ncid, vidR, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidR, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidR, ncctg, ncrchnk3)
#endif
        endif
!
! S-coordinate "omega" vertical velocity.
!
        if (wrt(indxO)) then
          lvar=lenstr(vname(1,indxO))
          ierr=nf_def_var (ncid, vname(1,indxO)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidO)
# ifdef AVRH
          text='averaged '/ /vname(2,indxO)
# else
          text=vname(2,indxO)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidO, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxO))
          ierr=nf_put_att_text (ncid, vidO, 'units',     lvar,
     &                                  vname(3,indxO)(1:lvar))
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidO, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidO, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidO, ncctg, ncrchnk3)
#endif
        endif
!
! True vertical velocity.
!
        if (wrt(indxW)) then
          lvar=lenstr(vname(1,indxW))
          ierr=nf_def_var (ncid, vname(1,indxW)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidW)
# ifdef AVRH
          text='averaged '/ /vname(2,indxW)
# else
          text=vname(2,indxW)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidW, 'long_name', lvar,
     &                                            text(1:lvar))
          lvar=lenstr(vname(3,indxW))
          ierr=nf_put_att_text (ncid, vidW, 'units',     lvar,
     &                                  vname(3,indxW)(1:lvar))
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidW, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidW, ncshuff, ncdefl, nclev )
          ierr=nf_def_var_chunking(ncid, vidW, ncctg, ncrchnk3)
#endif
        endif
!
! Vertical viscosity coefficient.
!
        if (wrt(indxAkv)) then
          lvar=lenstr(vname(1,indxAkv))
          ierr=nf_def_var (ncid, vname(1,indxAkv)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidAkv)
# ifdef AVRH
          text='averaged '/ /vname(2,indxAkv)
# else
          text=vname(2,indxAkv)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidAkv, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxAkv))
          ierr=nf_put_att_text (ncid, vidAkv, 'units',     lvar,
     &                                  vname(3,indxAkv)(1:lvar))
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidAkv, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidAkv, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidAkv, ncctg, ncrchnk3)
#endif
        endif
!
! Vertical diffusion coefficient for potential temperature.
!
        if (wrt(indxAkt)) then
          lvar=lenstr(vname(1,indxAkt))
          ierr=nf_def_var (ncid, vname(1,indxAkt)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidAkt)
# ifdef AVRH
          text='averaged '/ /vname(2,indxAkt)
# else
          text=vname(2,indxAkt)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidAkt, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxAkt))
          ierr=nf_put_att_text (ncid, vidAkt, 'units',     lvar,
     &                                  vname(3,indxAkt)(1:lvar))
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidAkt, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidAkt, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidAkt, ncctg, ncrchnk3)
#endif
        endif
# if 0
# ifdef KPP_DIAGNOSE
!
! Diffusivity due to vertical velocity shear:
!
        if (wrt(indxRich)) then
          lvar=lenstr(vname(1,indxRich))
          ierr=nf_def_var (ncid, vname(1,indxRich)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidRich)
# ifdef AVRH
          text='averaged '/ /vname(2,indxRich)
# else
          text=vname(2,indxRich)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidRich, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxRich))
          ierr=nf_put_att_text (ncid, vidRich, 'units',     lvar,
     &                                  vname(3,indxRich)(1:lvar))
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidRich, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
        endif
!
! Local gradient Richardson number:
!
        if (wrt(indxRichN)) then
          lvar=lenstr(vname(1,indxRichN))
          ierr=nf_def_var (ncid, vname(1,indxRichN)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidRichN)
# ifdef AVRH
          text='averaged '/ /vname(2,indxRichN)
# else
          text=vname(2,indxRichN)
# endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidRichN, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxRichN))
          ierr=nf_put_att_text (ncid, vidRichN, 'units',     lvar,
     &                                  vname(3,indxRichN)(1:lvar))
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidRichN, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
        endif
# endif /* KPP_DIAGNOSE */
#endif /* 0 */
# ifdef SALINITY
!
! Vertical diffusion coefficient for salinity.
!
        if (wrt(indxAks)) then
          lvar=lenstr(vname(1,indxAks))
          ierr=nf_def_var (ncid, vname(1,indxAks)(1:lvar), NF_FOUT,
     &                                           NVDIM, WGRD, vidAks)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxAks)
#  else
          text=vname(2,indxAks)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidAks, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxAks))
          ierr=nf_put_att_text (ncid, vidAks, 'units',     lvar,
     &                                  vname(3,indxAks)(1:lvar))
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidAks, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidAks, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidAks, ncctg, ncrchnk3)
#endif
        endif
# endif /* SALINITY */
# ifdef LMD_KPP
!
! Depth of planetary boundary layer.
!
        if (wrt(indxHbl)) then
          lvar=lenstr(vname(1,indxHbl))
          ierr=nf_def_var (ncid, vname(1,indxHbl)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidHbl)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxHbl)
#  else
          text=vname(2,indxHbl)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidHbl, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxHbl))
          ierr=nf_put_att_text (ncid, vidHbl, 'units',     lvar,
     &                                  vname(3,indxHbl)(1:lvar))
#ifdef MASK_LAND_DATA 
          ierr=nf_put_att_FOUT (ncid, vidHbl, '_FillValue',
     &                                   NF_FOUT, 1, spv_set)
#endif
#ifdef NCCOMPRESS
          ierr=nf_def_var_deflate(ncid, vidHbl, ncshuff, ncdefl, nclev)
          ierr=nf_def_var_chunking(ncid, vidHbl, ncctg, ncrchnk2)
#endif
        endif
# endif /* LMD_KPP */
!
# ifdef LMD_BKPP
!
! Depth of bottom boundary layer.
!
        if (wrt(indxHbbl)) then
          lvar=lenstr(vname(1,indxHbbl))
          ierr=nf_def_var (ncid, vname(1,indxHbbl)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidHbbl)
#  ifdef AVRH
          text='averaged '/ /vname(2,indxHbbl)
#  else
          text=vname(2,indxHbbl)
#  endif
          lvar=lenstr(text)
          ierr=nf_put_att_text (ncid, vidHbbl, 'long_name', lvar,
     &                                              text(1:lvar))
          lvar=lenstr(vname(3,indxHbbl))
          ierr=nf_put_att_text (ncid, vidHbbl, 'units',     lvar,
     &                                  vname(3,indxHbbl)(1:lvar))
        endif
# endif /* LMD_BKPP */

# if defined BIOLOGY_BEC || (defined BIOLOGY_NPZDOC && \
    defined OXYGEN && defined CARBON)
#  if defined CH_CARBON_DEPTH

!
! HCO3_depth
!
        lvar=lenstr(vname(1,indxHCO3d_rst))
        ierr=nf_def_var (ncid, vname(1,indxHCO3d_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidHCO3d)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxHCO3d_rst)
#  else
        text=vname(2,indxHCO3d_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidHCO3d, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxHCO3d_rst))
        ierr=nf_put_att_text (ncid, vidHCO3d, 'units',     lvar,
     &                                  vname(3,indxHCO3d_rst)(1:lvar))
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidHCO3d, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

!
! CO3_depth
!
        lvar=lenstr(vname(1,indxCO3d_rst))
        ierr=nf_def_var (ncid, vname(1,indxCO3d_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidCO3d)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxCO3d_rst)
#  else
        text=vname(2,indxCO3d_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidCO3d, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxCO3d_rst))
        ierr=nf_put_att_text (ncid, vidCO3d, 'units',     lvar,
     &                                  vname(3,indxCO3d_rst)(1:lvar))
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidCO3d, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif


!
! CO2STAR_DEPTH
!
        lvar=lenstr(vname(1,indxCO2STARd_rst))
        ierr=nf_def_var (ncid, vname(1,indxCO2STARd_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidCO2STARd)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxCO2STARd_rst)
#  else
        text=vname(2,indxCO2STARd_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidCO2STARd, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxCO2STARd_rst))
        ierr=nf_put_att_text (ncid, vidCO2STARd, 'units',     lvar,
     &                                  vname(3,indxCO2STARd_rst)(1:lvar))
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidCO2STARd, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

!
! PH_DEPTH
!         
         lvar=lenstr(vname(1,indxPHd_rst))
        ierr=nf_def_var (ncid, vname(1,indxPHd_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidPHd)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPHd_rst)
#  else
        text=vname(2,indxPHd_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPHd, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPHd_rst))
        ierr=nf_put_att_text (ncid, vidPHd, 'units',     lvar,
     &                                  vname(3,indxPHd_rst)(1:lvar))
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidPHd, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

#endif /*CH_CARBON_DEPTH*/

!
! pH
!
         lvar=lenstr(vname(1,indxPH_rst))
        ierr=nf_def_var (ncid, vname(1,indxPH_rst)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidPH)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPH_rst)
#  else
        text=vname(2,indxPH_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPH, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPH_rst))
        ierr=nf_put_att_text (ncid, vidPH, 'units',     lvar,
     &                                  vname(3,indxPH_rst)(1:lvar))
#ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidPH, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif
!
! pCO2:
!
        lvar=lenstr(vname(1,indxPCO2_rst))
        ierr=nf_def_var (ncid, vname(1,indxPCO2_rst)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidPCO2)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPCO2_rst)
#  else
        text=vname(2,indxPCO2_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPCO2, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPCO2_rst))
        ierr=nf_put_att_text (ncid, vidPCO2, 'units',     lvar,
     &                                  vname(3,indxPCO2_rst)(1:lvar))
#ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidPCO2, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif

!
! pCO2air:
!
        lvar=lenstr(vname(1,indxPCO2air_rst))
        ierr=nf_def_var (ncid, vname(1,indxPCO2air_rst)(1:lvar), NF_FOUT,
     &                                           3, r2dgrd, vidPCO2air)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPCO2air_rst)
#  else
        text=vname(2,indxPCO2air_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPCO2air, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPCO2air_rst))
        ierr=nf_put_att_text (ncid, vidPCO2air, 'units',     lvar,
     &       vname(3,indxPCO2air_rst)(1:lvar))
#ifdef MASK_LAND_DATA
        ierr=nf_put_att_FOUT (ncid, vidPCO2air, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif


# endif /* BIOLOGY_BEC || (BIOLOGY_NPZDOC && OXYGEN && CARBON) */

# if defined BIOLOGY_BEC || defined BIOLOGY_NPZDOC
!
! PARinc:
!
        lvar=lenstr(vname(1,indxPARinc_rst))
        ierr=nf_def_var (ncid, vname(1,indxPARinc_rst)(1:lvar), NF_FOUT,
     &       3, r2dgrd, vidPARinc)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPARinc_rst)
#  else
        text=vname(2,indxPARinc_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPARinc, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPARinc_rst))
        ierr=nf_put_att_text (ncid, vidPARinc, 'units',     lvar,
     &                                  vname(3,indxPARinc_rst)(1:lvar))
#ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidPARinc, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif
!
! PAR:
!
        lvar=lenstr(vname(1,indxPAR_rst))
        ierr=nf_def_var (ncid, vname(1,indxPAR_rst)(1:lvar), NF_FOUT,
     &                                           NVDIM, RGRD, vidPAR)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxPAR_rst)
#  else
        text=vname(2,indxPAR_rst)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidPAR, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxPAR_rst))
        ierr=nf_put_att_text (ncid, vidPAR, 'units',     lvar,
     &                                  vname(3,indxPAR_rst)(1:lvar))
#ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidPAR, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#endif
#endif /* BIOLOGY_BEC || BIOLOGY_NPZDOC */

!DL:
# ifdef WRITE_DEPTHS
!
! depths of rho points:
!
        lvar=lenstr(vname(1,indxz_r))
        ierr=nf_def_var (ncid, vname(1,indxz_r)(1:lvar), NF_FOUT,
     &                                           4, r3dgrd, vidz_r)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxz_r)
#  else
        text=vname(2,indxz_r)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidz_r, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxz_r))
        ierr=nf_put_att_text (ncid, vidz_r, 'units',     lvar,
     &                                  vname(3,indxz_r)(1:lvar))
#  ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidz_r, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#  endif
!
! depths at w points:
!
        lvar=lenstr(vname(1,indxz_w))
        ierr=nf_def_var (ncid, vname(1,indxz_w)(1:lvar), NF_FOUT,
     &                                           4, w3dgrd, vidz_w)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxz_w)
#  else
        text=vname(2,indxz_w)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidz_w, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxz_w))
        ierr=nf_put_att_text (ncid, vidz_w, 'units',     lvar,
     &                                  vname(3,indxz_w)(1:lvar))
#  ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidz_w, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#  endif
!
! thicknesses of sigma layers:
!
        lvar=lenstr(vname(1,indxHz))
        ierr=nf_def_var (ncid, vname(1,indxHz)(1:lvar), NF_FOUT,
     &                                           4, r3dgrd, vidHz)
#  ifdef AVRH
        text='averaged '/ /vname(2,indxHz)
#  else
        text=vname(2,indxHz)
#  endif
        lvar=lenstr(text)
        ierr=nf_put_att_text (ncid, vidHz, 'long_name', lvar,
     &                                              text(1:lvar))
        lvar=lenstr(vname(3,indxHz))
        ierr=nf_put_att_text (ncid, vidHz, 'units',     lvar,
     &                                  vname(3,indxHz)(1:lvar))
#  ifdef MASK_LAND_DATA 
        ierr=nf_put_att_FOUT (ncid, vidHz, '_FillValue',
     &                                  NF_FOUT, 1, spv_set)
#  endif
# endif /* WRITE_DEPTHS */
#endif /* SOLVE3D */
!
! Leave definition mode.
! ----- ---------- -----
!
        ! ierr=nf_enddef(ncid)
        !  Pad header section (20kB) to allow faster adding of new variables
        ierr=nf_enddef(ncid,20000,8,20000,8)
        write(stdout,'(6x,6A,i4)')  SDEF_FOUT,   ': Created new ',
     &  'netCDF file ''', ncname(1:lstr), '''.' MYID
!
! Open existing file and prepare for appending data:   Inquire about
! ==== ======== ==== === ======= === ========= ====    dimensions and
! variables. Check for consistency with model dimensions. In the case
! when file is rejected (whether it cannot be opened, or something is
! wrong with its dimensions) create a new file.  After that verify
! that all necessary variables are already defined, find and save
! their netCDF IDs.
!
      elseif (ncid.eq.-1) then
        ierr=nf_open (ncname(1:lstr), nf_write, ncid)
        if (ierr. eq. nf_noerr) then
          MPI_master_only write(stdout,'(1x,4A,1x,A,I3,A,I4)')
     &                  'Opened existing ',
     &                 'netCDF file ''',   ncname(1:lstr),   ''''
CR     &                , 'ncid =', ncid  
CR     &                   MYID
          ierr=checkdims (ncid, ncname(1:lstr), lstr, rec)
          if (ierr .eq. nf_noerr) then
            if (rec_per_file.eq.0) then
              ierr=rec+1 - total_rec
            else
              ierr=rec+1 - (1+mod(total_rec-1, rec_per_file))
            endif
            if (ierr.gt.0) then
              MPI_master_only write( stdout,
     &                 '(/1x,3A,I5,1x,A/8x,3A,I5,/8x,A,I5,1x,A/)'
     &           ) 'WARNING: ', SDEF_FOUT,': Actual number of records',
     &               rec,  'in netCDF file',  '''',  ncname(1:lstr),
     &             ''' exceeds the record number from restart data',
     &             rec+1-ierr,'/', total_rec,', restart is assumed.'
              rec=rec-ierr
            elseif (rec_per_file.eq.0) then
              total_rec=rec+1           ! <-- set to the next record
#if defined MPI && !defined PARALLEL_FILES
              if (mynode.gt.0) total_rec=total_rec-1
#endif
            endif
            ierr=nf_noerr
          endif
        endif
 
        if (ierr. ne. nf_noerr) then
#if defined MPI && !defined PARALLEL_FILES
          if (mynode.eq.0) then
            create_new_file=.true.
            goto 10
          else
            write(stdout,'(/1x,5A,I4/)') '### ERROR: ',SDEF_FOUT,
     &        ': Cannot open file ''', ncname(1:lstr), '''.' MYID
            goto 99                                       !--> ERROR
          endif
#else
          create_new_file=.true.
          goto 10
#endif
        endif
!
! Find netCDF IDs of evolving model variables:
! ---- ------ --- -- -------- ----- ----------
!
! Time step indices:
!
        ierr=nf_inq_varid (ncid, 'time_step', vidTstep)
        if (ierr .ne. nf_noerr) then
          write(stdout,1) 'time_step', ncname(1:lstr)
          goto 99                                         !--> ERROR
        endif
!
! Time.
!
        lvar=lenstr(vname(1,indxTime))
        ierr=nf_inq_varid (ncid,vname(1,indxTime)(1:lvar),vidTime)
        if (ierr .ne. nf_noerr) then
          write(stdout,1) vname(1,indxTime)(1:lvar), ncname(1:lstr)
          goto 99                                         !--> ERROR
        endif
!
! Free-surface.
!
        if (wrt(indxZ)) then
          lvar=lenstr(vname(1,indxZ))
          ierr=nf_inq_varid (ncid, vname(1,indxZ)(1:lvar), vidZ)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxZ)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
!
! 2D momenta in XI- and ETA-directions.
!
        if (wrt(indxUb)) then
          lvar=lenstr(vname(1,indxUb))
          ierr=nf_inq_varid (ncid, vname(1,indxUb)(1:lvar), vidUb)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxUb)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
 
        if (wrt(indxVb)) then
          lvar=lenstr(vname(1,indxVb))
          ierr=nf_inq_varid (ncid, vname(1,indxVb)(1:lvar), vidVb)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxVb)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
 
 
#ifdef SOLVE3D
!
! 3D momenta in XI- and ETA-directions.
!
        if (wrt(indxU)) then
          lvar=lenstr(vname(1,indxU))
          ierr=nf_inq_varid (ncid, vname(1,indxU)(1:lvar), vidU)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxU)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
 
        if (wrt(indxV)) then
          lvar=lenstr(vname(1,indxV))
          ierr=nf_inq_varid (ncid, vname(1,indxV)(1:lvar), vidV)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxV)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
!
! Tracer variables.
!
        do itrc=1,NT
          if (wrt(indxT+itrc-1)) then
            lvar=lenstr(vname(1,indxT+itrc-1))
            ierr=nf_inq_varid (ncid, vname(1,indxT+itrc-1)(1:lvar),
     &                                                 vidT(itrc))
            if (ierr .ne. nf_noerr) then
              write(stdout,1) vname(1,indxT+itrc-1)(1:lvar),
     &                                       ncname(1:lstr)
              goto 99                                     !--> ERROR
            endif
          endif
        enddo
# ifdef SEDIMENT_BIOLOGY
!
! Sediment tracer variables.
!
        do itrc=1,NT_sed
          if (wrt(indxSedOrgN+itrc-1)) then
            lvar=lenstr(vname(1,indxSedOrgN+itrc-1))
            ierr=nf_inq_varid (ncid, 
     &           vname(1,indxSedOrgN+itrc-1)(1:lvar),vidTsed(itrc))
            if (ierr .ne. nf_noerr) then
              write(stdout,1) vname(1,indxSedOrgN+itrc-1)(1:lvar),
     &                                       ncname(1:lstr) 
              goto 99                                     !--> ERROR
            endif
          endif
        enddo
# endif /* SEDIMENT_BIOLOGY */
!
! Density anomaly.
!
        if (wrt(indxR)) then
          lvar=lenstr(vname(1,indxR))
          ierr=nf_inq_varid (ncid, vname(1,indxR)(1:lvar), vidR)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxR)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
!
! S-coordinate "omega" vertical velocity.
!
        if (wrt(indxO)) then
          lvar=lenstr(vname(1,indxO))
          ierr=nf_inq_varid (ncid, vname(1,indxO)(1:lvar), vidO)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxO)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
!
! True vertical velocity.
!
        if (wrt(indxW)) then
          lvar=lenstr(vname(1,indxW))
          ierr=nf_inq_varid (ncid, vname(1,indxW)(1:lvar), vidW)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxW)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
!
! Vertical viscosity coefficient.
!
        if (wrt(indxAkv)) then
          lvar=lenstr(vname(1,indxAkv))
          ierr=nf_inq_varid (ncid, vname(1,indxAkv)(1:lvar), vidAkv)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxAkv)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
!
! Vertical diffusion coefficient for potential temperature.
!
        if (wrt(indxAkt)) then
          lvar=lenstr(vname(1,indxAkt))
          ierr=nf_inq_varid (ncid,vname(1,indxAkt)(1:lvar), vidAkt)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxAkt)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
# ifdef KPP_DIAGNOSE
!
! Diffusivity due to vertical velocity shear:
!
        if (wrt(indxRich)) then
          lvar=lenstr(vname(1,indxRich))
          ierr=nf_inq_varid (ncid,vname(1,indxRich)(1:lvar), vidRich)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxRich)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
!
! Local gradient Richardson number:
!
        if (wrt(indxRichN)) then
          lvar=lenstr(vname(1,indxRichN))
          ierr=nf_inq_varid (ncid,vname(1,indxRichN)(1:lvar), vidRichN)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxRichN)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
# endif /* KPP_DIAGNOSE */
# ifdef SALINITY
!
! Vertical diffusion coefficient for salinity.
!
        if (wrt(indxAks)) then
          lvar=lenstr(vname(1,indxAks))
          ierr=nf_inq_varid (ncid,vname(1,indxAks)(1:lvar), vidAks)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxAks)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
# endif
# ifdef LMD_KPP
!
! Depth of planetary boundary layer.
!
        if (wrt(indxHbl)) then
          lvar=lenstr(vname(1,indxHbl))
          ierr=nf_inq_varid (ncid,vname(1,indxHbl)(1:lvar), vidHbl)
          if (ierr .ne. nf_noerr) then
          write(stdout,1) vname(1,indxHbl)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
# endif
# ifdef LMD_BKPP
!
! Depth of bottom planetary boundary layer.
!
        if (wrt(indxHbbl)) then
          lvar=lenstr(vname(1,indxHbbl))
          ierr=nf_inq_varid (ncid,vname(1,indxHbbl)(1:lvar), vidHbbl)
          if (ierr .ne. nf_noerr) then
            write(stdout,1) vname(1,indxHbbl)(1:lvar), ncname(1:lstr)
            goto 99                                       !--> ERROR
          endif
        endif
# endif

# if defined BIOLOGY_BEC || (defined BIOLOGY_NPZDOC && \
    defined OXYGEN && defined CARBON)
#  if defined CH_CARBON_DEPTH

!
! HCO3_DEPTH
!
        lvar=lenstr(vname(1,indxHCO3d_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxHCO3d_rst)(1:lvar), vidHCO3d)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxHCO3d_rst)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif

!
! CO3_DEPTH
!
        lvar=lenstr(vname(1,indxCO3d_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxCO3d_rst)(1:lvar), vidCO3d)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxCO3d_rst)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif

!
! Co2STAR_DEPTH
!
        lvar=lenstr(vname(1,indxCO2STARd_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxCO2STARd_rst)(1:lvar), vidCO2STARd)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxCO2STARd_rst)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif

!
! PH_DEPTH
!
        lvar=lenstr(vname(1,indxPHd_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPHd_rst)(1:lvar), vidPHd)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxPHd_rst)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif


#  endif /* CH_CARBON_DEPTH */
!
! pH
!
        lvar=lenstr(vname(1,indxPH_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPH_rst)(1:lvar), vidPH)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxPH_rst)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif
!
! pCO2:
!
        lvar=lenstr(vname(1,indxPCO2_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPCO2_rst)(1:lvar), vidPCO2)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxPCO2_rst)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif
!
! pCO2air:
!
        lvar=lenstr(vname(1,indxPCO2air_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPCO2air_rst)(1:lvar), 
     &       vidPCO2air)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxPCO2air_rst)(1:lvar), 
     &          ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif
# endif /* BIOLOGY_BEC || (BIOLOGY_NPZDOC && OXYGEN && CARBON) */

# if defined BIOLOGY_BEC || defined BIOLOGY_NPZDOC
!
! PARinc:
!
        lvar=lenstr(vname(1,indxPARinc_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPARinc_rst)(1:lvar), 
     &       vidPARinc)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxPARinc_rst)(1:lvar), 
     &          ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif
!
! PAR:
!
        lvar=lenstr(vname(1,indxPAR_rst))
        ierr=nf_inq_varid (ncid,vname(1,indxPAR_rst)(1:lvar), vidPAR)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxPAR_rst)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif
# endif /* BIOLOGY_BEC || BIOLOGY_NPZDOC */
!DL June 2011:
# ifdef WRITE_DEPTHS
!
! depths of rho points:
!
        lvar=lenstr(vname(1,indxz_r))
        ierr=nf_inq_varid (ncid,vname(1,indxz_r)(1:lvar), vidz_r)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxz_r)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif
!
! depths at w points:
!
        lvar=lenstr(vname(1,indxz_w))
        ierr=nf_inq_varid (ncid,vname(1,indxz_w)(1:lvar), vidz_w)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxz_w)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif
!
! thicknesses of sigma layers:
!
        lvar=lenstr(vname(1,indxHz))
        ierr=nf_inq_varid (ncid,vname(1,indxHz)(1:lvar), vidHz)
        if (ierr .ne. nf_noerr) then
           write(stdout,1) vname(1,indxHz)(1:lvar), ncname(1:lstr)
           goto 99                                       !--> ERROR
        endif
# endif /* WRITE_DEPTHS */
#endif /* SOLVE3D */
        MPI_master_only write(*,'(6x,3A,i4,1x,A,i4)') 
     &              SDEF_FOUT,  ': Opened ',
     &              'existing file from record =', rec 
CR     &                  MYID
 
#if defined MPI && !defined PARALLEL_FILES
      else
        ierr=nf_open (ncname(1:lstr), nf_write, ncid)
        if (ierr .eq. nf_noerr) then
CR          write(stdout,'(1x,5A,I5)')  SDEF_FOUT,  ': Opened ',
CR     &      'existing file ''', ncname(1:lstr), ''' ncid =', ncid
        else
          write(stdout,'(/1x,5A,I4/)')   '### ERROR: ', SDEF_FOUT,
     &      ': Cannot open file ''', ncname(1:lstr), '''.' MYID
          goto 99                                         !--> ERROR
        endif
#endif
      endif             !<--  create_new_file
 
      ierr=nf_set_fill (ncid, nf_nofill, lvar)
      if (ierr .ne. nf_noerr) then
        write(*,'(6x,4A,i4)')    '### ERROR: def_his/avg: Cannot ',
     &          'switch to ''nf_nofill'' mode.', nf_strerror(ierr)
     &           MYID
      endif
   1  format(/1x,'### ERROR: def_his/avg: Cannot find variable ''',
     &                       A, ''' in netCDF file ''', A, '''.'/)
#if (defined PUT_GRID_INTO_HISTORY && !defined AVRH)\
 || ( defined PUT_GRID_INTO_AVERAGES \
 &&   (defined AVRH || defined AVR2DH) )
!
! Write grid variables.
!------ ---- ----------
!
        if (total_rec.le.1) call wrt_grid (ncid, ncname, lstr)
#endif
  99  return
      end
 
#undef ncname
#undef rec_per_file
#undef wrt
#undef vidTime
#undef vidTstep
#undef vidZ
#undef vidUb
#undef vidVb
#undef vidU
#undef vidV
#undef vidT
#if defined BIOLOGY_NPZDOC || defined BIOLOGY_BEC
# if defined CH_CARBON_DEPTH
#  undef vidPHDEPTH
#  undef vidCO2STARd
#  undef vidHCO3d
#  undef vidCO3d
#  undef vidPHd
# endif /* CH_CARBON_DEPTH */
# undef vidPH
# undef vidPCO2
# undef vidPCO2air
# undef vidPARinc
# undef vidPAR
#  ifdef SEDIMENT_BIOLOGY
#   undef vidTsed
#  endif
#endif /* BIOLOGY_NPZDOC || BIOLOGY_BEC */
# ifdef WRITE_DEPTHS
#  undef vidz_r
#  undef vidz_w
#  undef vidHz
# endif /* WRITE_DEPTHS */

#undef vidR
#undef vidO
#undef vidW
#undef vidAkv
#undef vidAkt
#undef vidRich
#undef vidRichN
#undef vidAks
#undef vidHbl
#undef vidHbbl
#undef DEF_FOUT
#undef SDEF_FOUT
#undef NVDIM
#undef RGRD
#undef UGRD
#undef VGRD
#undef WGRD
 
#ifndef AVRH
# define AVRH
# ifdef AVERAGES
#  include "def_his.F"
# endif
#else
# if defined  SLICE_AVG && !defined AVR2DH
!--> # ifndef AVR2DH
#  define AVR2DH
#  include "def_his.F"
# endif
#endif
