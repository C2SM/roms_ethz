# Background reference
# https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#output

# Source dir
SRCDIR ?= $(CURDIR)/../src
# BLDDIR dir
BLDDIR ?= $(SRCDIR)/../build
# Header dir
INCDIR ?= $(SRCDIR)/include
# Biology sources (BEC, NPZDOC)
BIODIR ?= $(SRCDIR)/biology
# Dependencies dir
DEPDIR := $(BLDDIR)/.depend

ifdef COUPLED
# Oasis/MCT coupler dir
#ifneq  ($(origin ROMSOC_OASIS_INSTALL), undefined)
#OASDIR:=$(origin ROMSOC_OASIS_INSTALL)
ifdef ROMSOC_OASIS_INSTALL
    OASDIR :=$(ROMSOC_OASIS_INSTALL)
else
    OASDIR :=$(shell spack location -i oasis)
endif
OASINC := -I$(OASDIR)/build/lib/psmile.MPI1 \
          -I$(OASDIR)/build/lib/mct
OASLIB := -L$(OASDIR)/lib -lpsmile.MPI1 -lscrip -lmct -lmpeu
endif

# Create directories if needed
$(shell test -d $(BLDDIR) || mkdir -p $(BLDDIR) )
$(shell test -d $(DEPDIR) || mkdir -p $(DEPDIR) )

# Command to create dependency files in DEPDIR
MAKEDEPEND = $(SRCDIR)/depend.sh
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.Td


# Clear the default suffixes
.SUFFIXES:
.SUFFIXES: .o .mod .f .F .F90 .f90

# Declare *.f files precious to keep them
.PRECIOUS: %.f %.f90
.INTERMEDIATE: %.f %.f90

# Clear implicit rules:
%.o: %.F
%.o: %.f

# Define Q for quite mode:
Q ?= @
# Verbose
#Q = 

# Include file locations
CPPFLAGS += -I$(SRCDIR) -I$(INCDIR) -I$(BIODIR)
ifdef COUPLED
FFLAGS += $(OASINC) 
CPPFLAGS += -DCOUP_OAS
endif
ifdef MPI_HOME
   CPPFLAGS += -I$(MPI_HOME)/include
endif
ifdef MPI_ROOT
   CPPFLAGS += -I$(MPI_ROOT)/include
endif
ifdef MPICH_DIR
   CPPFLAGS += -I$(MPICH_DIR)/include
endif



# Using pattern rules
%.o: %.f
	@echo Compiling $<
	$(Q)cd $(BLDDIR); $(MPIFC) -c $(FFLAGS) $(notdir $<)
# Rule to create .f files;
# also create dependencies files when creating these.
%.f: %.F mpc
	$(Q)$(MAKEDEPEND) $(dir $<) $(CPPFLAGS) $< > $(DEPDIR)/$*.d
	$(Q)$(CPP) $(CPPFTN) $(CPPFLAGS)  $< | ./mpc > $(BLDDIR)/$*.f


# OASIS coupling code is written in FORTRAN free-format
# Note: mpc is not run on F90 files
%.o: %.F90
	@echo Compiling $<
	$(Q)$(MAKEDEPEND) $(dir $<) $(CPPFLAGS) $< > $(DEPDIR)/$*.d
	$(Q)$(CPP) $(CPPFTN) $(CPPFLAGS) $< > $*.f90
	$(Q)$(MPIFC) -c $(FFLAGS) $*.f90 -o $@
%.mod: %.F90
	@echo Compiling $<
	$(Q)$(MAKEDEPEND) $(dir $<) $(CPPFLAGS) $< > $(DEPDIR)/$*.d
	$(Q)$(CPP) $(CPPFTN) $(CPPFLAGS) $< > $*.f90
	$(Q)$(MPIFC) -c $(FFLAGS) $*.f90 -o $@


# Use C preprocessor
# fpp might be an alternative but for consistancy one should
# then also use it in MAKEDEPENT
CPP := cpp
CPPFTN := -P -traditional-cpp # traditional-cpp need to keep white-spaces

# not working yet...
#CPP := ifort
#CPPFTN := -gen-dep -syntax-only

ifndef NO_IO
   # NetCDF include and libraries

   # netcdf-fortran
   NF-CONFIG = $(shell which nf-config 2>/dev/null)
   ifeq ($(NF-CONFIG),)
      $(error nf-config not found (NetCDF library))
   else
      NCINC += $(shell nf-config --fflags)
      NCINC += -I$(shell nf-config --includedir)
   endif
   # netcdf-c
   NC-CONFIG = $(shell which nc-config 2>/dev/null)
   ifeq ($(NC-CONFIG),)
      $(error nf-config not found (NetCDF library))
   endif

   NCINC += $(shell nc-config --fflags)
   NCINC += -I$(shell nc-config --includedir)
   ifeq ($(NCINC),)
      NCINC += -I$(shell nc-config --cflags)
   endif

   NCLIB ?= $(shell nf-config --flibs)
   NCLIB +=  $(shell nc-config --libs)
   ifeq ($(NCLIB),)
      NCLIB := $(shell nc-config --libs)
   endif

   CPPFLAGS += $(NCINC)
endif


# Default: mpi executable
ifdef NOMPI
   MPIFC = $(FC)
else
   ifdef MPI_ROOT
      CPPFLAGS += -I$(MPI_ROOT)/include
   endif
endif
LDR = $(MPIFC)
ifdef COUPLED
   LDFLAGS += $(OASLIB)
endif


# Legacy ROMS macro names
LCDF := $(NCLIB)
CFT := $(FC)

FCOMP ?=  $(notdir $(FC)) # Used to identify the compiler

ifeq ($(strip $(FCOMP)),ifort)
   #
   # ============= Intel compiler =============
   #
   FCFLAGS := -D__IFC
   # use mpifort (intel mpi) if available
   #ifeq ($(MPIFC),)
   MPIFC := $(shell which mpifort 2>/dev/null)
   #endif
   ifeq ($(MPIFC),) # no mpifort found
      MPIFC := $(shell which mpiifort 2>/dev/null)
   endif
   ifeq ($(MPIFC),) # neither mpifort nor mpiifort found
      MPIFC := mpif90
   endif

   COMP_FILES = *__genmod.f90 *__genmod.mod # cleanup stuff
   LARGE_MEM_FLAG=   -mcmodel=medium # Sometimes needed for large tiles
   ifdef DEBUG
      #FFLAGS := -g -check all -CA -CB -CS
      #FFLAGS := -g -check arg_temp_created,bounds,pointers,uninit,format,output_conversion
      FFLAGS := -warn all -g -check arg_temp_created,bounds,pointers,uninit,format,output_conversion
   else
      # Agressive optimisation for current CPU
      #FFLAGS  = -O3 -xHOST -132 -fp-model source $(LARGE_MEM_FLAG)
      # Generic on same machine FFLAGS  = -O2 -132 -xHOST -fp-model source $(LARGE_MEM_FLAG)
      # Fat binaries for both Euler 2 (avx2) and Euler 4,5 (avx512)
      # If you get problems with reproducibility try replacing "-fp-model source" with "-fp-model strict"
      #FFLAGS  = -O2 -132 -axcore-avx512,avx2 -fp-model source $(LARGE_MEM_FLAG) -diag-disable=remark
      FFLAGS  = -O2 -132 -fp-model source $(LARGE_MEM_FLAG) -diag-disable=remark
   endif
   ifdef OPENMP
      OPENMP :=  -fpp2 -openmp
   endif
   ifdef PROFILE
      FFLAGS += -prof_gen
   endif
   ifdef I_MPI_ROOT
      CPPFLAGS += -I$(I_MPI_ROOT)/include64
      CPPFLAGS += -I$(I_MPI_ROOT)/intel64/include
   endif
else ifeq ($(strip $(FCOMP)),pgf90)
   #
   # ============= PGI compiler =============
   #
   FCFLAGS  := -DPGI -DINT_IARGC
   ifdef OPENMP
      OPENMP := -mp
   endif
   FFLAGS  := -mcmodel=medium -fast -O4 $(OPENMP)
else ifeq ($(strip $(FCOMP)),ftn)
   #
   # ============= CSCS cray fortran  compiler =============
   #
   MPIFC := $(FC)
   FCFLAGS  := -DINT_IARGC -DPGI 
   ifdef OPENMP
      OPENMP := -homp
   endif
   # added 03-2022 to hopefully fix a cross-compilation issue nvhpc at CSCS
   LDFLAGS += -lnvcpumath -lnvhpcatm
else ifeq ($(strip $(FCOMP)),gfortran)
   #
   # ============= Gnu gfortran compiler =============
   #
   ifeq ($(MPIFC),) # no mpifort found
      MPIFC = mpif90
   endif
   FCFLAGS := -D_GNU
   ifdef OPENMP
      OPENMP := -fopenmp
   endif
   ifdef DEBUG
      FFLAGS := -g -DEBUG:div_check=3:subscript_check=ON:trap_uninitialized=ON:verbose_runtime=ON
   else
      FFLAGS := -O3 $(OPENMP)
   endif
else
    default:
    $(error Unknown Compiler $(FCOMP). Add settings to Makedefs)
endif

CPPFLAGS += $(FCFLAGS)

# Print makefile macros
#    Usage: e.g., make print-CPPFLAGS
print-% :
	@echo $* = '"'$($*)'"'
