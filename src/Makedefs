# Background reference
# https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#output

# source dir
SRCDIR ?= $(CURDIR)
# object dir)
BLDDIR ?= $(SRCDIR)/../Build
# header dir
INCDIR ?= $(SRCDIR)/include
 # biology sources (BEC, NPZDOC)
BIODIR ?= $(SRCDIR)/biology
# dependencies dir
DEPDIR := $(SRCDIR)/.deps

# Create directories if needed
$(shell test -d $(DEPDIR) || mkdir $(DEPDIR) )
$(shell test -d $(BLDDIR) || mkdir $(BLDDIR) )

# Command to create dependency files in DEPDIR
MAKEDEPEND := $(SRCDIR)/depend.sh
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.Td

# Clear the default suffixes
.SUFFIXES:
.SUFFIXES: .o .f .F

# Declare *.f files precious to keep them
.PRECIOUS: %.f
.INTERMEDIATE: %.f

# Clear implicit rules:
%.o: %.F
%.o: %.f

# Define Q for quite mode:
Q = @

# Include file locations
CPPFLAGS+= -I$(SRCDIR) -I$(INCDIR) -I$(BIODIR)



# Using pattern rules
%.o: %.f
	@echo Compiling $<
	$(Q)cd $(BLDDIR); $(MPIFC) -c $(FFLAGS) $(notdir $<)
# Rule to create .f files.
# also create dependencies files when creating these.
%.f: %.F mpc
	$(Q)$(MAKEDEPEND) 'dirname $<' $< > $(DEPDIR)/$*.d
	$(Q)$(CPP) $(CPPFTN) $(CPPFLAGS)  $< | $(SRCDIR)/mpc > $(BLDDIR)/$*.f

# Use C preprocessor
# fpp might be an alternative but for consistancy one should
# then also use it in MAKEDEPENT
CPP := cpp
CPPFTN := -P -traditional-cpp # traditional-cpp need to keep white-spaces

# NetCDF
#  Use NETCDF var if it is defined
#  Otherwise try to use nc-config to find
#  suitable settings
#NETCDF := /cluster/apps/netcdf/4.3.2/x86_64/intel_14.0.1/serial
ifdef NETCDF
  NCINC ?= -I$(NETCDF)/include
  NCLIB ?= -L$(NETCDF)/../serial/lib -L$(NETCDF)/lib -lnetcdff -lnetcdf
else
  NCINC ?= $(shell nc-config --fflags)
  ifeq ($(NCINC),)
    NCINC := $(shell nc-config --cflags)
  endif
  NCLIB ?= $(shell nc-config --flibs)
  ifeq ($(NCLIB),)
    NCLIB := $(shell nc-config --libs)
  endif
endif

CPPFLAGS += $(NCINC)

# Default: mpi executable
ifndef NOMPI
   MPIFC = mpif90
   ifdef I_MPI_ROOT
      CPPFLAGS += -I$(I_MPI_ROOT)/include64
   else
      CPPFLAGS += -I$(MPI_ROOT)/include
   endif
endif
MPIFC ?= $(FC)
LDR = $(MPIFC)

# Legacy ROMS macro names
LCDF := $(NCLIB)
CFT := $(FC)


FCOMP ?=  $(notdir $(FC)) # use to identify the compiler

# ============= Intel compiler =============
ifeq ($(strip $(FCOMP)),ifort)
   FCFLAGS := -D__IFC

   #mm for intel/2018.1@Euler:
   MPIFC := $(MPIFC) -fc=ifort
   COMP_FILES = *__genmod.f90 *__genmod.mod # cleanup stuff
   LARGE_MEM_FLAG=   -mcmodel=medium # Sometimes needed for large tiles
   ifndef DEBUG
      # Default: Agressive optimisation for current CPU
      #FFLAGS  = -O3 -xHOST -132 -fp-model source $(LARGE_MEM_FLAG)
      # Generic on same machine FFLAGS  = -O2 -132 -xHOST -fp-model source $(LARGE_MEM_FLAG)
      # For avx512 architectures: (use -axcore-avx512,avx2 for all Euler CPUs)
      #FFLAGS  = -O2 -132 -xcore-avx2 -fp-model source $(LARGE_MEM_FLAG) # Euler 2,3
      #FFLAGS  = -O2 -132 -xcore-avx512 -fp-model source $(LARGE_MEM_FLAG) # Euler 4,5
      # Fat binaries for both Euler 2 (avx2) and Euler 4,5 (avx512)
      FFLAGS  = -O2 -132 -axcore-avx512,avx2 -fp-model source $(LARGE_MEM_FLAG) -diag-disable=remark
   else
      #FFLAGS := -g -check all -CA -CB -CS
      #FFLAGS := -g -check arg_temp_created,bounds,pointers,uninit,format,output_conversion
      FFLAGS := -warn all -g -check arg_temp_created,bounds,pointers,uninit,format,output_conversion
   endif
   ifdef OPENMP
      OPENMP :=  -fpp2 -openmp
   endif
   ifdef PROFILE
      FFLAGS += -prof_gen
   endif
#endif
#
# ============= PGI compiler =============
else ifeq ($(strip $(FCOMP)),pgf90)
   FCFLAGS  := -DPGI
   ifdef OPENMP
      OPENMP := -mp
   endif
   CPPFLAGS += -DINT_IARGC
   FFLAGS  := -mcmodel=medium -fast -O4 $(OPENMP)
# endif
#
# ============= Gnu gfortran compiler =============
else ifeq ($(strip $(FCOMP)),gfortran)
   FCFLAGS := -D_GNU
   ifdef OPENMP
      OPENMP := -fopenmp
   endif
   ifdef DEBUG
      FFLAGS := -g -DEBUG:div_check=3:subscript_check=ON:trap_uninitialized=ON:verbose_runtime=ON
   else
      FFLAGS := -O3 $(OPENMP)
   endif
else
default:
	@echo Unknown Compiler: '>'$(FCOMP)'<' Add setting to Makedefs
endif

CPPFLAGS += $(FCFLAGS)

# Print makefile macros
#    Usage: e.g., make print-CPPFLAGS
print-% :
	@echo $* = '"'$($*)'"'
#
