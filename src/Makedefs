# This roughly follow  https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#output
# DEPDIR is the directory to store  created dependencies using MAKEDEPEND
DEPDIR:=.deps

$(shell mkdir -p $(DEPDIR) >/dev/null)
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.Td
# Command to create dependency files in DEPDIR
MAKEDEPEND=./depend.sh

.SUFFIXES:	# Clear the default suffixes
.SUFFIXES: .o .f .F

# Declare *.f files precious to keep them
.PRECIOUS: %.f
.INTERMEDIATE: %.f

# Clear implicit rules:
%.o: %.F
%.o: %.f

# quite mode:
# Q = @

CPPFLAGS+= -IHeader

CPPFLAGS += -IBiology

VPATH := $(INCLUDE)

# Using pattern rules
%.o: %.f
	$(Q)$(MPIFC) -c $(FFLAGS) $<
# Rule to create .f files.
# also create dependencies files when creating these.
%.f: %.F mpc
	$(Q)$(MAKEDEPEND) 'dirname $<' $< > $(DEPDIR)/$*.d
	$(Q)$(CPP) $(CPPFTN) $(CPPFLAGS) $< | mpc > $*.f

# use C preprocessor
#fpp might be an alternative but for consistancy one should
# then also use it in MAKEDEPENT
CPP := cpp
CPPFTN := -P -traditional-cpp # traditional-cpp need to keep white-spaces

# NetCDF
NCINC := -I$(NETCDF)/include
CPPFLAGS += $(NCINC)
NCLIB := -L$(NETCDF)/../serial/lib -L$(NETCDF)/lib -lnetcdff -lnetcdf

# Default: mpi executable
ifndef NOMPI
   MPIFC = mpif90
   ifdef I_MPI_ROOT
      CPPFLAGS += -I$(I_MPI_ROOT)/include64
   else
      CPPFLAGS += -I$(MPI_ROOT)/include
   endif
endif
MPIFC ?= $(FC)
LDR = $(MPIFC)

# Legacy ROMS macro names
LCDF := $(NCLIB)
CFT := $(FC)


FCOMP ?=  $(notdir $(FC)) # use to identify the compiler

# ============= Intel compiler =============
ifeq ($(strip $(FCOMP)),ifort)
   FCFLAGS := -D__IFC
   COMP_FILES = *__genmod.f90 *__genmod.mod # cleanup stuff
   LARGE_MEM_FLAG=   -mcmodel=medium # Sometimes needed for large tiles
   ifndef DEBUG
      # Default: Agressive optimisation for current CPU
      FFLAGS  = -O3 -xHOST -132 -fp-model source $(LARGE_MEM_FLAG)
   else
      #FFLAGS := -g -check all -CA -CB -CS
      #FFLAGS := -g -check arg_temp_created,bounds,pointers,uninit,format,output_conversion
      FFLAGS := -warn all -g -check arg_temp_created,bounds,pointers,uninit,format,output_conversion
   endif
   ifdef OPENMP
      OPENMP :=  -fpp2 -openmp
   endif
   ifdef PROFILE
      FFLAGS += -prof_gen
   endif
#endif
#
# ============= PGI compiler =============
else ifeq ($(strip $(FCOMP)),pgf90)
   FCFLAGS  := -DPGI
   ifdef OPENMP
      OPENMP := -mp
   endif
   CPPFLAGS += -DINT_IARGC
   FFLAGS  := -mcmodel=medium -fast -O4 $(OPENMP)
# endif
#
# ============= Gnu gfortran compiler =============
else ifeq ($(strip $(FCOMP)),gfortran)
   FCFLAGS := -D_GNU
   ifdef OPENMP
      OPENMP := -fopenmp
   endif
   ifdef DEBUG
      FFLAGS := -g -DEBUG:div_check=3:subscript_check=ON:trap_uninitialized=ON:verbose_runtime=ON
   else
      FFLAGS := -O3 $(OPENMP)
   endif
else
default:
	@echo Unknown Compiler: '>'$(FCOMP)'<' Add setting to Makedefs
endif

CPPFLAGS += $(FCFLAGS)

# Print makefile macros
#    Usage: e.g., make print-CPPFLAGS
print-% :
	@echo $* = '"'$($*)'"'
#
